// Copyright (c) 2023-2024 - Restate Software, Inc., Restate GmbH
//
// This file is part of the Restate service protocol, which is
// released under the MIT license.
//
// You can find a copy of the license in file LICENSE in the root
// directory of this repository or package, or at
// https://github.com/restatedev/proto/blob/main/LICENSE

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: proto/services/services.proto

//
//This package contains internal service interfaces

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User provided operation id, this is used as idempotency key.
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	// Stream id to uniquely identify a open stream between client and Restate.
	// There can be at most one open stream at the same time.
	StreamId string `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// Retention period for the response in seconds.
	// After the invocation completes, the response will be persisted for the
	// given duration. Afterwards, the system will cleanup the response and treats
	// any subsequent invocation with same operation_id as new.
	//
	// If not set, 30 minutes will be used as retention period.
	RetentionPeriodSec uint32 `protobuf:"varint,3,opt,name=retention_period_sec,json=retentionPeriodSec,proto3" json:"retention_period_sec,omitempty"`
	// Argument of the invocation
	Argument []byte `protobuf:"bytes,4,opt,name=argument,proto3" json:"argument,omitempty"`
}

func (x *StartRequest) Reset() {
	*x = StartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRequest) ProtoMessage() {}

func (x *StartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRequest.ProtoReflect.Descriptor instead.
func (*StartRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_services_proto_rawDescGZIP(), []int{0}
}

func (x *StartRequest) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *StartRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *StartRequest) GetRetentionPeriodSec() uint32 {
	if x != nil {
		return x.RetentionPeriodSec
	}
	return 0
}

func (x *StartRequest) GetArgument() []byte {
	if x != nil {
		return x.Argument
	}
	return nil
}

type StartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to InvocationStatus:
	//
	//	*StartResponse_Executing
	//	*StartResponse_Completed
	InvocationStatus isStartResponse_InvocationStatus `protobuf_oneof:"invocation_status"`
}

func (x *StartResponse) Reset() {
	*x = StartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartResponse) ProtoMessage() {}

func (x *StartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartResponse.ProtoReflect.Descriptor instead.
func (*StartResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_services_proto_rawDescGZIP(), []int{1}
}

func (m *StartResponse) GetInvocationStatus() isStartResponse_InvocationStatus {
	if m != nil {
		return m.InvocationStatus
	}
	return nil
}

func (x *StartResponse) GetExecuting() []byte {
	if x, ok := x.GetInvocationStatus().(*StartResponse_Executing); ok {
		return x.Executing
	}
	return nil
}

func (x *StartResponse) GetCompleted() *GetResultResponse {
	if x, ok := x.GetInvocationStatus().(*StartResponse_Completed); ok {
		return x.Completed
	}
	return nil
}

type isStartResponse_InvocationStatus interface {
	isStartResponse_InvocationStatus()
}

type StartResponse_Executing struct {
	// Contains the concatenated first messages of the stream, encoded using the
	// same framing used by service-protocol
	Executing []byte `protobuf:"bytes,1,opt,name=executing,proto3,oneof"`
}

type StartResponse_Completed struct {
	// Contains the result of the invocation
	Completed *GetResultResponse `protobuf:"bytes,2,opt,name=completed,proto3,oneof"`
}

func (*StartResponse_Executing) isStartResponse_InvocationStatus() {}

func (*StartResponse_Completed) isStartResponse_InvocationStatus() {}

type SendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User provided operation id, this is used as idempotency key.
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	// Stream id to uniquely identify a open stream between client and Restate.
	// There can be at most one open stream at the same time.
	StreamId string `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// Contains the concatenated messages of the stream, encoded using the same
	// framing used by service-protocol
	Messages []byte `protobuf:"bytes,3,opt,name=messages,proto3" json:"messages,omitempty"`
}

func (x *SendRequest) Reset() {
	*x = SendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRequest) ProtoMessage() {}

func (x *SendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRequest.ProtoReflect.Descriptor instead.
func (*SendRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_services_proto_rawDescGZIP(), []int{2}
}

func (x *SendRequest) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *SendRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *SendRequest) GetMessages() []byte {
	if x != nil {
		return x.Messages
	}
	return nil
}

type SendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*SendResponse_Ok
	//	*SendResponse_InvalidStream
	//	*SendResponse_InvocationCompleted
	Response isSendResponse_Response `protobuf_oneof:"response"`
}

func (x *SendResponse) Reset() {
	*x = SendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResponse) ProtoMessage() {}

func (x *SendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResponse.ProtoReflect.Descriptor instead.
func (*SendResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_services_proto_rawDescGZIP(), []int{3}
}

func (m *SendResponse) GetResponse() isSendResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *SendResponse) GetOk() *emptypb.Empty {
	if x, ok := x.GetResponse().(*SendResponse_Ok); ok {
		return x.Ok
	}
	return nil
}

func (x *SendResponse) GetInvalidStream() *emptypb.Empty {
	if x, ok := x.GetResponse().(*SendResponse_InvalidStream); ok {
		return x.InvalidStream
	}
	return nil
}

func (x *SendResponse) GetInvocationCompleted() *emptypb.Empty {
	if x, ok := x.GetResponse().(*SendResponse_InvocationCompleted); ok {
		return x.InvocationCompleted
	}
	return nil
}

type isSendResponse_Response interface {
	isSendResponse_Response()
}

type SendResponse_Ok struct {
	Ok *emptypb.Empty `protobuf:"bytes,1,opt,name=ok,proto3,oneof"`
}

type SendResponse_InvalidStream struct {
	// This means the provided stream_id is invalid, and it should not be
	// reused, nor the client should create a new stream using Start(). The
	// client can instead read the invocation result using GetResult().
	InvalidStream *emptypb.Empty `protobuf:"bytes,2,opt,name=invalid_stream,json=invalidStream,proto3,oneof"`
}

type SendResponse_InvocationCompleted struct {
	// This means the invocation is completed, and the result should be
	// collected using GetResult
	InvocationCompleted *emptypb.Empty `protobuf:"bytes,3,opt,name=invocation_completed,json=invocationCompleted,proto3,oneof"`
}

func (*SendResponse_Ok) isSendResponse_Response() {}

func (*SendResponse_InvalidStream) isSendResponse_Response() {}

func (*SendResponse_InvocationCompleted) isSendResponse_Response() {}

type RecvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User provided operation id, this is used as idempotency key.
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	// Stream id to uniquely identify a open stream between client and Restate.
	// There can be at most one open stream at the same time.
	StreamId string `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (x *RecvRequest) Reset() {
	*x = RecvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvRequest) ProtoMessage() {}

func (x *RecvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvRequest.ProtoReflect.Descriptor instead.
func (*RecvRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_services_proto_rawDescGZIP(), []int{4}
}

func (x *RecvRequest) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *RecvRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type RecvResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*RecvResponse_Messages
	//	*RecvResponse_InvalidStream
	//	*RecvResponse_InvocationCompleted
	Response isRecvResponse_Response `protobuf_oneof:"response"`
}

func (x *RecvResponse) Reset() {
	*x = RecvResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecvResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvResponse) ProtoMessage() {}

func (x *RecvResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvResponse.ProtoReflect.Descriptor instead.
func (*RecvResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_services_proto_rawDescGZIP(), []int{5}
}

func (m *RecvResponse) GetResponse() isRecvResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *RecvResponse) GetMessages() []byte {
	if x, ok := x.GetResponse().(*RecvResponse_Messages); ok {
		return x.Messages
	}
	return nil
}

func (x *RecvResponse) GetInvalidStream() *emptypb.Empty {
	if x, ok := x.GetResponse().(*RecvResponse_InvalidStream); ok {
		return x.InvalidStream
	}
	return nil
}

func (x *RecvResponse) GetInvocationCompleted() *emptypb.Empty {
	if x, ok := x.GetResponse().(*RecvResponse_InvocationCompleted); ok {
		return x.InvocationCompleted
	}
	return nil
}

type isRecvResponse_Response interface {
	isRecvResponse_Response()
}

type RecvResponse_Messages struct {
	// Contains the concatenated messages of the stream, encoded using the same
	// framing used by service-protocol
	Messages []byte `protobuf:"bytes,1,opt,name=messages,proto3,oneof"`
}

type RecvResponse_InvalidStream struct {
	// This means the provided stream_id is invalid, and it should not be
	// reused, nor the client should create a new stream using Start(). The
	// client can instead read the invocation result using GetResult().
	InvalidStream *emptypb.Empty `protobuf:"bytes,2,opt,name=invalid_stream,json=invalidStream,proto3,oneof"`
}

type RecvResponse_InvocationCompleted struct {
	// This means the invocation is completed, and the result should be
	// collected using GetResult
	InvocationCompleted *emptypb.Empty `protobuf:"bytes,3,opt,name=invocation_completed,json=invocationCompleted,proto3,oneof"`
}

func (*RecvResponse_Messages) isRecvResponse_Response() {}

func (*RecvResponse_InvalidStream) isRecvResponse_Response() {}

func (*RecvResponse_InvocationCompleted) isRecvResponse_Response() {}

type GetResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User provided operation id, this is used as idempotency key.
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
}

func (x *GetResultRequest) Reset() {
	*x = GetResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultRequest) ProtoMessage() {}

func (x *GetResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultRequest.ProtoReflect.Descriptor instead.
func (*GetResultRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_services_proto_rawDescGZIP(), []int{6}
}

func (x *GetResultRequest) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

type GetResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GetResultResponse_None
	//	*GetResultResponse_Success
	//	*GetResultResponse_Failure
	Response isGetResultResponse_Response `protobuf_oneof:"response"`
	// Timestamp of the response expiry time in RFC3339.
	// Empty if response = none
	ExpiryTime string `protobuf:"bytes,15,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
}

func (x *GetResultResponse) Reset() {
	*x = GetResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_services_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultResponse) ProtoMessage() {}

func (x *GetResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_services_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultResponse.ProtoReflect.Descriptor instead.
func (*GetResultResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_services_proto_rawDescGZIP(), []int{7}
}

func (m *GetResultResponse) GetResponse() isGetResultResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetResultResponse) GetNone() *emptypb.Empty {
	if x, ok := x.GetResponse().(*GetResultResponse_None); ok {
		return x.None
	}
	return nil
}

func (x *GetResultResponse) GetSuccess() []byte {
	if x, ok := x.GetResponse().(*GetResultResponse_Success); ok {
		return x.Success
	}
	return nil
}

func (x *GetResultResponse) GetFailure() *GetResultResponse_InvocationFailure {
	if x, ok := x.GetResponse().(*GetResultResponse_Failure); ok {
		return x.Failure
	}
	return nil
}

func (x *GetResultResponse) GetExpiryTime() string {
	if x != nil {
		return x.ExpiryTime
	}
	return ""
}

type isGetResultResponse_Response interface {
	isGetResultResponse_Response()
}

type GetResultResponse_None struct {
	// See GetResult documentation
	None *emptypb.Empty `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type GetResultResponse_Success struct {
	Success []byte `protobuf:"bytes,2,opt,name=success,proto3,oneof"`
}

type GetResultResponse_Failure struct {
	Failure *GetResultResponse_InvocationFailure `protobuf:"bytes,3,opt,name=failure,proto3,oneof"`
}

func (*GetResultResponse_None) isGetResultResponse_Response() {}

func (*GetResultResponse_Success) isGetResultResponse_Response() {}

func (*GetResultResponse_Failure) isGetResultResponse_Response() {}

type CleanupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User provided operation id, this is used as idempotency key.
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
}

func (x *CleanupRequest) Reset() {
	*x = CleanupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_services_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupRequest) ProtoMessage() {}

func (x *CleanupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_services_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupRequest.ProtoReflect.Descriptor instead.
func (*CleanupRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_services_proto_rawDescGZIP(), []int{8}
}

func (x *CleanupRequest) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

type GetResultResponse_InvocationFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetResultResponse_InvocationFailure) Reset() {
	*x = GetResultResponse_InvocationFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_services_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultResponse_InvocationFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultResponse_InvocationFailure) ProtoMessage() {}

func (x *GetResultResponse_InvocationFailure) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_services_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultResponse_InvocationFailure.ProtoReflect.Descriptor instead.
func (*GetResultResponse_InvocationFailure) Descriptor() ([]byte, []int) {
	return file_proto_services_services_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetResultResponse_InvocationFailure) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetResultResponse_InvocationFailure) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_proto_services_services_proto protoreflect.FileDescriptor

var file_proto_services_services_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1c, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x15, 0x64,
	0x65, 0x76, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa2, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0x82, 0x19, 0x00, 0x52, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6f, 0x0a, 0x0b,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0c, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0x90, 0x82, 0x19, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xd2, 0x01,
	0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x4b, 0x0a, 0x14, 0x69, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x53, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0x82, 0x19, 0x00, 0x52, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x76,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x4b, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x13, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0x82, 0x19, 0x00,
	0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xac, 0x02,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e,
	0x65, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5d, 0x0a,
	0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x41, 0x0a,
	0x11, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x0a, 0x0e,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0x82, 0x19, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x32, 0xf4, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x60, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x2a, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x04, 0x53,
	0x65, 0x6e, 0x64, 0x12, 0x29, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x04, 0x52, 0x65,
	0x63, 0x76, 0x12, 0x29, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x63, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63,
	0x76, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x75, 0x70, 0x12, 0x2c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x04, 0x90, 0x82, 0x19, 0x01, 0x42, 0x85,
	0x02, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x42, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x75, 0x68, 0x61, 0x6d, 0x61, 0x64, 0x61, 0x7a, 0x6d, 0x79, 0x2f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0xa2, 0x02, 0x04, 0x44, 0x52, 0x53, 0x53, 0xaa, 0x02, 0x1c, 0x44, 0x65,
	0x76, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0xca, 0x02, 0x1c, 0x44, 0x65, 0x76,
	0x5c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0xe2, 0x02, 0x28, 0x44, 0x65, 0x76, 0x5c,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1f, 0x44, 0x65, 0x76, 0x3a, 0x3a, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_services_services_proto_rawDescOnce sync.Once
	file_proto_services_services_proto_rawDescData = file_proto_services_services_proto_rawDesc
)

func file_proto_services_services_proto_rawDescGZIP() []byte {
	file_proto_services_services_proto_rawDescOnce.Do(func() {
		file_proto_services_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_services_services_proto_rawDescData)
	})
	return file_proto_services_services_proto_rawDescData
}

var file_proto_services_services_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_services_services_proto_goTypes = []interface{}{
	(*StartRequest)(nil),                        // 0: dev.restate.service.services.StartRequest
	(*StartResponse)(nil),                       // 1: dev.restate.service.services.StartResponse
	(*SendRequest)(nil),                         // 2: dev.restate.service.services.SendRequest
	(*SendResponse)(nil),                        // 3: dev.restate.service.services.SendResponse
	(*RecvRequest)(nil),                         // 4: dev.restate.service.services.RecvRequest
	(*RecvResponse)(nil),                        // 5: dev.restate.service.services.RecvResponse
	(*GetResultRequest)(nil),                    // 6: dev.restate.service.services.GetResultRequest
	(*GetResultResponse)(nil),                   // 7: dev.restate.service.services.GetResultResponse
	(*CleanupRequest)(nil),                      // 8: dev.restate.service.services.CleanupRequest
	(*GetResultResponse_InvocationFailure)(nil), // 9: dev.restate.service.services.GetResultResponse.InvocationFailure
	(*emptypb.Empty)(nil),                       // 10: google.protobuf.Empty
}
var file_proto_services_services_proto_depIdxs = []int32{
	7,  // 0: dev.restate.service.services.StartResponse.completed:type_name -> dev.restate.service.services.GetResultResponse
	10, // 1: dev.restate.service.services.SendResponse.ok:type_name -> google.protobuf.Empty
	10, // 2: dev.restate.service.services.SendResponse.invalid_stream:type_name -> google.protobuf.Empty
	10, // 3: dev.restate.service.services.SendResponse.invocation_completed:type_name -> google.protobuf.Empty
	10, // 4: dev.restate.service.services.RecvResponse.invalid_stream:type_name -> google.protobuf.Empty
	10, // 5: dev.restate.service.services.RecvResponse.invocation_completed:type_name -> google.protobuf.Empty
	10, // 6: dev.restate.service.services.GetResultResponse.none:type_name -> google.protobuf.Empty
	9,  // 7: dev.restate.service.services.GetResultResponse.failure:type_name -> dev.restate.service.services.GetResultResponse.InvocationFailure
	0,  // 8: dev.restate.service.services.RemoteContext.Start:input_type -> dev.restate.service.services.StartRequest
	2,  // 9: dev.restate.service.services.RemoteContext.Send:input_type -> dev.restate.service.services.SendRequest
	4,  // 10: dev.restate.service.services.RemoteContext.Recv:input_type -> dev.restate.service.services.RecvRequest
	6,  // 11: dev.restate.service.services.RemoteContext.GetResult:input_type -> dev.restate.service.services.GetResultRequest
	8,  // 12: dev.restate.service.services.RemoteContext.Cleanup:input_type -> dev.restate.service.services.CleanupRequest
	1,  // 13: dev.restate.service.services.RemoteContext.Start:output_type -> dev.restate.service.services.StartResponse
	3,  // 14: dev.restate.service.services.RemoteContext.Send:output_type -> dev.restate.service.services.SendResponse
	5,  // 15: dev.restate.service.services.RemoteContext.Recv:output_type -> dev.restate.service.services.RecvResponse
	7,  // 16: dev.restate.service.services.RemoteContext.GetResult:output_type -> dev.restate.service.services.GetResultResponse
	10, // 17: dev.restate.service.services.RemoteContext.Cleanup:output_type -> google.protobuf.Empty
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_services_services_proto_init() }
func file_proto_services_services_proto_init() {
	if File_proto_services_services_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_services_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecvResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_services_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_services_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_services_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultResponse_InvocationFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_services_services_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*StartResponse_Executing)(nil),
		(*StartResponse_Completed)(nil),
	}
	file_proto_services_services_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SendResponse_Ok)(nil),
		(*SendResponse_InvalidStream)(nil),
		(*SendResponse_InvocationCompleted)(nil),
	}
	file_proto_services_services_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*RecvResponse_Messages)(nil),
		(*RecvResponse_InvalidStream)(nil),
		(*RecvResponse_InvocationCompleted)(nil),
	}
	file_proto_services_services_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*GetResultResponse_None)(nil),
		(*GetResultResponse_Success)(nil),
		(*GetResultResponse_Failure)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_services_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_services_services_proto_goTypes,
		DependencyIndexes: file_proto_services_services_proto_depIdxs,
		MessageInfos:      file_proto_services_services_proto_msgTypes,
	}.Build()
	File_proto_services_services_proto = out.File
	file_proto_services_services_proto_rawDesc = nil
	file_proto_services_services_proto_goTypes = nil
	file_proto_services_services_proto_depIdxs = nil
}
